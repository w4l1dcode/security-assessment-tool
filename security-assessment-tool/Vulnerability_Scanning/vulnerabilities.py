import requests
import re
import simplejson.errors
from tabulate import tabulate
from typing import Tuple, Dict, List
import csv


def search_cve(query) -> List[Dict]:
    """
    Search for CVEs in the National Vulnerability Database with a common platform enumeration name.
    :param query: str, the search query to be used.
    :return: List[dict], a list of CVEs.
    """

    try:
        # Construct the URL for the CVE search API.
        url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName={query}&isVulnerable"
        # Make a GET request to the API and parse the response as JSON.
        data = requests.get(url).json()
    except simplejson.errors.JSONDecodeError:
        # If there is an error decoding the response as JSON, print an error message and return None.
        print(f"No JSON object could be decoded for CPE: {query}")
        return None

    # Extract the list of vulnerabilities from the response data.
    vulnerabilities = data.get('vulnerabilities', [])

    cve_info = []
    for vulnerability in vulnerabilities:
        # Extract the CVE ID, description, severity, CVSS score, and impact from the vulnerability information.
        cve_id = vulnerability['cve']['id']
        metrics = vulnerability.get('cve', {}).get('metrics', {})
        cvssMetricV2 = metrics.get('cvssMetricV2', [{}])[0]
        description = vulnerability['cve']['descriptions'][0]['value']
        try:
            severity = cvssMetricV2['baseSeverity']
            cvss_score = cvssMetricV2['cvssData']['baseScore']
            impact = cvssMetricV2['cvssData']['confidentialityImpact']
        except KeyError:
            # If any of the required fields are missing, skip this vulnerability and continue to the next one.
            continue

        # Print information about the CVE.
        # print(
        #     f"CVE ID: {cve_id}, Severity: {severity}, CVSS Score: {cvss_score}, Impact: {impact}, Description: {description}")

        # Add information about the CVE to the list of CVEs.
        cve_info.append({'cve_id': cve_id, 'severity': severity, 'cvss_score': cvss_score, 'impact': impact,
                         'description': description})

    return cve_info


def analyze_network_vulnerabilities(nm_scan):
    """
    Analyzes the network vulnerabilities by searching for CVEs in the network scan results.
    :param nm_scan: nmap.PortScanner, the results of the network scan.
    :return: Tuple[int, Dict[str, int], List[str], float, Dict[str, List[int]]], containing the following information:
             - num_vulnerabilities: int, the total number of vulnerabilities found in the scan results.
             - severity_counts: Dict[str, int], a dictionary containing the count of vulnerabilities for each severity level.
             - cve_ids: List[str], a list of CVE IDs found in the scan results.
             - overall_risk_score: float, the overall risk score calculated by summing the CVSS scores and dividing by
                                   the number of vulnerabilities.
             - endpoints: Dict[str, List[int]], a dictionary containing the list of open ports for each host in the scan results.
    """

    # initialize variables
    num_vulnerabilities = 0
    severity_counts = {}
    cve_ids = []
    cve_info_list = []
    total_cvss_score = 0
    endpoints = {}
    print("finished scan, collecting data from scan")
    # iterate over each host in the scan results
    for host in nm_scan.all_hosts():
        cpe_str = str(nm_scan[host])
        cpe_list = re.findall(r'cpe:/[a-z]:[a-zA-Z0-9._-]+:[a-zA-Z0-9._-]+:[a-zA-Z0-9._-]*\d+[a-zA-Z0-9._-]*('
                              r'?:\.\d+)?[a-zA-Z0-9._-]*', cpe_str)
        try:
            endpoints[host] = nm_scan[host]['tcp'].keys()
        except:
            continue

        # iterate over each unique CPE for the host
        for cpe in list(set(cpe_list)):
            # convert the CPE to the latest version format
            cpe_v1 = cpe.split("/")[1]
            cpe_v3 = f"cpe:2.3:{cpe_v1}"
            # search for CVEs for the given CPE
            cve_info = search_cve(cpe_v3)

            # iterate over each CVE found for the CPE
            for info in cve_info:
                num_vulnerabilities += 1
                cve_id = info['cve_id']
                severity = info['severity']
                cvss_score = info['cvss_score']
                description = info['description']
                impact = info['impact']
                cve_ids.append(cve_id)
                total_cvss_score += cvss_score
                cve_info_list.append([host,cve_id, severity, impact, description])
                # update the count of vulnerabilities for the severity level
                if severity in severity_counts:
                    severity_counts[severity] += 1
                else:
                    severity_counts[severity] = 1

            # calculate the overall risk score
            try:
                overall_risk_score = total_cvss_score / num_vulnerabilities
            except:
                overall_risk_score = "nan"
            # create a table of the CVE information
            table_headers = ["Host ip", "CVE ID", "Severity", "Impact", "Description"]
            # table_cve_info = tabulate(cve_info_list, headers=table_headers)
            with open("Vulnerability_Scanning/CVE_data.csv", "w", newline='',
                      encoding="utf-8") as cve_csv:
                csvwriter = csv.writer(cve_csv, delimiter=',')
                csvwriter.writerow(table_headers)
                csvwriter.writerows(cve_info_list)

            # return the results as a tuple
    print("Finished compiling vulnerabilities!")
    return num_vulnerabilities, severity_counts, cve_ids, overall_risk_score, endpoints