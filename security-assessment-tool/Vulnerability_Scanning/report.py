import matplotlib.pyplot as plt
import numpy as np
from Vulnerability_Scanning.vulnerabilities import analyze_network_vulnerabilities
from Vulnerability_Scanning.network import scan_network


def categorize_vulnerabilities(severity_counts):
    """
    Categorize the vulnerabilities by severity and plot them in a pie chart.

    :param severity_counts: dict, the counts of vulnerabilities by severity.
    """

    labels = list(severity_counts.keys())
    values = list(severity_counts.values())

    plt.pie(values, labels=labels, autopct='%1.1f%%')
    plt.title("Vulnerabilities Ranked by Severity")
    plt.show()


def get_tested_endpoints(endpoints):
    """
    Get for each host the endpoints and plot them in a bar graph.

    :param endpoints: dict, the endpoints discovered during the network scan.
    """

    hosts = list(endpoints.keys())
    endpoints_per_host = [len(endpoints[host]) for host in hosts]

    plt.bar(np.arange(len(hosts)), endpoints_per_host)
    plt.xticks(np.arange(len(hosts)), hosts)
    plt.ylabel('Number of Endpoints Tested')
    plt.title('Endpoints Tested per Host')
    plt.show()


def risk_score(overall_risk_score):
    """
    Print the overall risk score for the network.

    :param overall_risk_score: float, the overall risk score for the network.
    """

    print(f"Overall Risk Score: {overall_risk_score}")


def get_number_of_vulnerabilities(num_vulns):
    """
    Print the number of vulnerabilities discovered during the network scan.

    :param num_vulns: int, the number of vulnerabilities discovered during the network scan.
    """

    print(f"Number of Vulnerabilities: {num_vulns}")


def analyze_network(ip_address):
    """
    Scan the network using nmap library and analyze the vulnerabilities.

    :param ip_address: str, the IP address to be scanned.
    """

    # Scan the network
    scan = scan_network(ip_address)

    # Analyze network vulnerabilities
    num_vulnerabilities, severity_counts, cve_ids, overall_risk_score, endpoints = analyze_network_vulnerabilities(scan)

    return num_vulnerabilities, severity_counts, cve_ids, overall_risk_score, endpoints
    # Plot results
    # get_number_of_vulnerabilities(num_vulnerabilities)
    # risk_score(overall_risk_score)
    # categorize_vulnerabilities(severity_counts)
    # get_tested_endpoints(endpoints)
