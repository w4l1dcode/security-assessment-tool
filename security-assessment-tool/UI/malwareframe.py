import Phishing_Detection.assessment_engine.assessment as phish
import customtkinter
import threading
import tkinter
from tkinter import ttk, PhotoImage
import pandas as pd
from PIL import Image
import sys
from tkinter import filedialog
from tkinter import END
import PrintLogger
import Malware_Analysis.assessment_engine.assessment as malwarescan
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import textwrap

class ToplevelWindow(customtkinter.CTkToplevel):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.dataframe = None
        self.minsize(width=970, height=550)
        self.title("Phishing scan result")
        self.df = None


class MalwareFrame(customtkinter.CTkFrame):
    def __init__(self, *args, header_name="Malware detection", **kwargs):
        super().__init__(*args, **kwargs)
        self.grid_rowconfigure(3, weight=1)
        self.directory = ""
        # self.grid_columnconfigure((0, 1, 2, 3), weight=1)
        # self.grid_columnconfigure((4, 5, 6), weight=0)

        self.second_frame_label = customtkinter.CTkLabel(self, text="Malware scan",
                                                         font=customtkinter.CTkFont(family="Arial", size=30))
        self.second_frame_label.grid(row=0, column=0, padx=20, pady=10, columnspan=3, sticky="w")

        self.chosedirbutton = customtkinter.CTkButton(master=self, fg_color="#2E6770", border_width=0,
                                                      text_color=("white", "#DCE4EE"), text="Select directory",
                                                      corner_radius=10,
                                                      command=self.choose_directory)
        self.chosedirbutton.grid(row=2, column=0, padx=20, pady=10, sticky="nsew")

        self.label_directory = customtkinter.CTkLabel(self, text="Chosen directory",
                                                      font=customtkinter.CTkFont(family="Arial", size=15,
                                                                                 weight="bold"))
        self.label_directory.grid(row=2, column=1, padx=10, pady=10, sticky="nsew")

        self.main_button_1 = customtkinter.CTkButton(master=self, fg_color="green", hover_color="#1F9F3A",
                                                     border_width=0,
                                                     text_color=("white", "#DCE4EE"), text="Start scan",
                                                     corner_radius=8,
                                                     command=self.malware_scan_event)
        self.main_button_1.grid(row=2, column=3, padx=10, pady=10, sticky="nsew")

        self.scrolloutput = customtkinter.CTkTextbox(self, width=550, state="disabled")
        self.scrolloutput.grid(row=3, column=0, columnspan=6, padx=20, pady=20, sticky="nsew")

        self.show_result_button = customtkinter.CTkButton(self, fg_color="gray", border_width=2,
                                                          text_color=("white", "#DCE4EE"), text="Show result",
                                                          corner_radius=8, state="DISABLED")
        self.show_result_button.grid(row=3, column=7, padx=20, pady=20, sticky="s")
        self.logger = PrintLogger.PrintLogger(self.scrolloutput)
        self.toplevel_window = None

    def setlog(self):
        sys.stdout = self.logger

    def choose_directory(self):
        self.directory = filedialog.askdirectory(initialdir="/",
                                            title="Select a directory")
        # Change label contents
        self.label_directory.configure(text="Selected directoy:\n" + "\n".join(textwrap.wrap(self.directory, width=40)))

    def malware_scan_event(self):
        self.logger.clear()
        if not self.directory:
            print("please provide folder to run scan on")
            return
        # Run prediction and display in seperate thread so the mainloop doesn't freeze
        detectionthread = threading.Thread(target=self.malware_scan)
        detectionthread.start()
        self.main_button_1.configure(state="disabled")

    def malware_scan(self):
        print("starting malware scan in:" + self.directory)
        count_f, count_p = malwarescan.predict_malware(self.directory)
        self.main_button_1.configure(state="normal")
        self.show_result_button.configure(state="normal", fg_color="green")
        self.show_result_button.configure(command=lambda: self.display_result(count_f, count_p))

    def display_result(self,count_f, count_p):
        dataframe = pd.read_csv("Malware_Analysis/assessment_engine/malware_prediction.csv", header=0)
        if self.toplevel_window is None or not self.toplevel_window.winfo_exists():
            self.toplevel_window = ToplevelWindow(self)
            self.toplevel_window.df = dataframe
            self.toplevel_window.focus()
            # create window if its None or destroyed
        else:
            self.toplevel_window.focus()
            self.toplevel_window.df = dataframe
        # Table of the output
        table_label = customtkinter.CTkLabel(self.toplevel_window, text="Prediction",
                                             font=customtkinter.CTkFont(family="Arial", size=15,
                                                                        weight="bold"))
        table_label.grid(row=0, column=0, padx=20, pady=0, sticky="sw")
        mapping = {1: "malware", 0: "benign"}
        dataframe.replace({"Positive": mapping}, inplace=True)
        self.toplevel_window.cols = list(dataframe.columns)
        self.toplevel_window.tree = ttk.Treeview(self.toplevel_window)
        self.toplevel_window.tree.grid(row=1, column=0, columnspan=2, padx=20, pady=(0, 20))
        self.toplevel_window.tree["columns"] = self.toplevel_window.cols
        for i in self.toplevel_window.cols:
            self.toplevel_window.tree.column(i, anchor="w")
            self.toplevel_window.tree.heading(i, text=i, anchor='w')

        for index, row in reversed(list(self.toplevel_window.df.iterrows())):
            self.toplevel_window.tree.insert("", 0, text=index, values=list(row))
        # Pie Chart
        pie_label = customtkinter.CTkLabel(self.toplevel_window, text="Result Distribution",
                                           font=customtkinter.CTkFont(family="Arial", size=15,
                                                                      weight="bold"))
        pie_label.grid(row=2, column=0, padx=20, pady=0, sticky="sw")

        value_counts = self.toplevel_window.df['Positive'].value_counts()
        labels = value_counts.index.tolist()
        sizes = value_counts.values.tolist()
        fig, ax = plt.subplots()
        ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
        ax.axis('equal')
        # creating the Tkinter canvas
        # containing the Matplotlib figure
        canvas = FigureCanvasTkAgg(fig,
                                   master=self.toplevel_window)
        canvas.draw()

        # placing the canvas on the Tkinter window
        canvas.get_tk_widget().grid(row=3, column=0, padx=20, pady=(0, 20), sticky="nw")

