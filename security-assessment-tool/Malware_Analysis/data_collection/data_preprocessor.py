import binascii
from math import log
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
import os


def process_data(directory):
    # PART 1
    # Converting .bin and .exe files to .bytes files
    src_dir = directory
    dst_dir = 'Malware_Analysis/data_collection/raw_bytes'
    # Create the destination folder if it doesn't exist
    if not os.path.exists(dst_dir):
        os.makedirs(dst_dir)

    # Loop through all files in the source directory
    for filename in os.listdir(src_dir):
        # Construct the full path to the source file
        src_path = src_dir+"/"+filename
        print(src_path)
        if os.path.isfile(src_path):
            if filename.endswith('.exe') or filename.endswith('.bin'):
                print(f'{filename} is an executable binary file')
                # Read the file data
                with open(src_path, 'rb') as f:
                    data = f.read()

                # Convert the data to hex
                hex_data = binascii.hexlify(data, ' ').decode('utf-8')

                # Get the base name of the file (without the extension)
                base_name = os.path.splitext(filename)[0]

                # Construct the full path to the output file
                dst_path = os.path.join(dst_dir, base_name + '.bytes')

                # Write the hex data to the output file
                if not os.path.exists(dst_path):
                    with open(dst_path, 'w') as f:
                        for i in range(0, len(hex_data), 48):
                            chunk = hex_data[i:i + 48]
                            f.write(chunk)
                            f.write('\n')
            else:
                continue

    # PART 2
    # Converting .bytes files into .png images

    # Directory containing .bytes files
    src_dir = 'Malware_Analysis/data_collection/raw_bytes'
    # Directory containing the .png images (converted .bytes files)
    dst_dir = 'Malware_Analysis/data_collection/malware_png/prediction'

    # Create the destination folder if it doesn't exist
    if not os.path.exists(dst_dir):
        os.makedirs(dst_dir)


    # Convert .bytes files into .png images
    def convertAndSave(array, name):
        print('Processing ' + name)
        b = int((array.shape[0] * 16) ** (0.5))
        b = 2 ** (int(log(b) / log(2)) + 1)
        a = int(array.shape[0] * 16 / b)
        array = array[:a * b // 16, :]
        array = np.reshape(array, (a, b))
        im = Image.fromarray(np.uint8(array))
        im.save(f"{dst_dir}/{os.path.splitext(name)[0]}.png", "PNG")
        return im


    # Get the list of files
    files = os.listdir(src_dir)
    print('files : ', files)

    # Convert files one by one
    for counter, name in enumerate(files):
        # Only the .bytes files from our folder
        if '.bytes' != name[-6:]:
            continue
        try:
            f = open(src_dir + '/' + name)
            array = []
            for line in f:
                xx = line.split()
                # Convert list of hexadecimal strings from reading lines to list of integers
                # array.append                      Append int or 0 to array
                # int(i,16) if i!='??' else 0       Convert i to int if i != ??, otherwise append 0
                # for i in xx[0:]                   Loop over each element in xx starting from the first element
                if len(xx) != 16:
                    array.append([int(i, 16) if i != '??' else 0 for i in xx[1:] ])
                elif len(xx) == 16:
                    array.append([int(i, 16) if i != '??' else 0 for i in xx])
                else:
                    array.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
            array = array[:4000]# print(array[:20])
            convertAndSave(np.array(array), name)
            del array
            f.close()
        except IndexError:
            print(f"Skipping file {name}: too many indices for array.")
            continue
