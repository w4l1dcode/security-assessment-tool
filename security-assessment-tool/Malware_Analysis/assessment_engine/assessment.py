import os
import numpy as np
import csv
from keras.preprocessing.image import ImageDataGenerator
from keras.models import load_model
import matplotlib.pyplot as plt
import Malware_Analysis.data_collection.data_preprocessor as data_preprocessor


# Folders with images to switch between
dirs = [
    '../data_collection/malimg_dataset/malimg_dataset_subdir_imgs_predict/Adialer.C',
    '../data_collection/malimg_dataset/malimg_dataset_subdir_imgs_predict/Agent.FYI',
    '../data_collection/malimg_dataset/malimg_dataset_subdir_imgs_predict/Allaple.A',
    '../data_collection/malimg_dataset/malimg_dataset_subdir_imgs_predict/Allaple.L',
    '../data_collection/malimg_dataset/malimg_dataset_subdir_imgs_predict/Alueron.gen!J',
    '../data_collection/malimg_dataset/malimg_dataset_subdir_imgs_predict/Autorun.K',
    '../data_collection/malimg_dataset/malimg_dataset_subdir_imgs_predict/C2LOP.gen!g',
    '../data_collection/malimg_dataset/malimg_dataset_subdir_imgs_predict/C2LOP.P',
    '../data_collection/malimg_dataset/malimg_dataset_subdir_imgs_predict/Dialplatform.B',
    '../data_collection/malimg_dataset/malimg_dataset_subdir_imgs_predict/Dontovo.A',
    '../data_collection/malimg_dataset/malimg_dataset_subdir_imgs_predict/Fakerean',
    '../data_collection/malimg_dataset/malimg_dataset_subdir_imgs_predict/Instantaccess',
    '../data_collection/malimg_dataset/malimg_dataset_subdir_imgs_predict/Lolyda.AA1',
    '../data_collection/malimg_dataset/malimg_dataset_subdir_imgs_predict/Lolyda.AA2',
    '../data_collection/malimg_dataset/malimg_dataset_subdir_imgs_predict/Lolyda.AA3',
    '../data_collection/malimg_dataset/malimg_dataset_subdir_imgs_predict/Lolyda.AT',
    '../data_collection/malimg_dataset/malimg_dataset_subdir_imgs_predict/Malex.gen!J',
    '../data_collection/malimg_dataset/malimg_dataset_subdir_imgs_predict/Obfuscator.AD',
    '../data_collection/malimg_dataset/malimg_dataset_subdir_imgs_predict/Rbot!gen',
    '../data_collection/malimg_dataset/malimg_dataset_subdir_imgs_predict/Skintrim.N',
    '../data_collection/malimg_dataset/malimg_dataset_subdir_imgs_predict/Swizzor.gen!E',
    '../data_collection/malimg_dataset/malimg_dataset_subdir_imgs_predict/Swizzor.gen!I',
    '../data_collection/malimg_dataset/malimg_dataset_subdir_imgs_predict/VB.AT',
    '../data_collection/malimg_dataset/malimg_dataset_subdir_imgs_predict/Wintrim.BX',
    '../data_collection/malimg_dataset/malimg_dataset_subdir_imgs_predict/Yuner.A',
    '../data_collection/malware_samples_raw_output_images'
]

# Different malware classes
class_names = ['Adialer.C', 'Agent.FYI', 'Allaple.A', 'Allaple.L', 'Alueron.gen!J',
               'Autorun.K', 'C2LOP.gen!g', 'C2LOP.P', 'Dialplatform.B', 'Dontovo.A',
               'Fakerean', 'Instantaccess', 'Lolyda.AA1', 'Lolyda.AA2', 'Lolyda.AA3',
               'Lolyda.AT', 'Malex.gen!J', 'Obfuscator.AD', 'Rbot!gen', 'Skintrim.N',
               'Swizzor.gen!E', 'Swizzor.gen!I', 'VB.AT', 'Wintrim.BX', 'Yuner.A']


# Function to switch between data directories
# def switch_dir(dir_index):
#     os.chdir(dirs[dir_index])
#
#
# switch_dir(25)
def predict_malware(folder):
    # Load the saved model
    model = load_model('Malware_Analysis/AI_model/malware_model.h5')

    # Turn binary files into pngs
    data_preprocessor.process_data(directory=folder)

    batches = ImageDataGenerator(rescale=1 / 255.).flow_from_directory(directory='Malware_Analysis/data_collection/malware_png/', target_size=(64, 64), batch_size=10000)

    # Make prediction
    prediction = model.predict(batches)

    # Extract filenames (ex. Images\file.png)
    filenames = batches.filenames

    count_p = 0
    count_f = 0

    # Write output of prediction to csv file
    with open("Malware_Analysis/assessment_engine/malware_prediction.csv", "w", newline='') as f:
        header = [["Image", "Class", "Probability", "Positive"]]
        writer = csv.writer(f)
        writer.writerows(header)

        for index, pred in enumerate(prediction):
            i = np.argmax(pred)
            img_name = filenames[index].split("\\")[1]
            predicted_class_name = class_names[i]
            probability = pred[i] * 100

            # Threshold of 80 => lower is not considered as malware
            if probability > 80:
                positive = 1
                count_p += 1
                print(f"{img_name} "
                      f"is {predicted_class_name} "
                      f"with probability {probability} "
                      f"and is considered as malware {positive}")
            else:
                positive = 0
                count_f += 1
                print(f"{img_name} "
                      f"is {predicted_class_name} "
                      f"with probability {probability} "
                      f"and is not considered as malware {positive}")

            data = [[img_name, predicted_class_name, probability, positive]]
            writer.writerows(data)
    return count_f,count_p
    #
    # def pie_chart():
    #     counts = [count_p, count_f]
    #     label = ['Positive', 'False']
    #     plt.pie(counts, labels=label, autopct='%1.1f%%', startangle=90)
    #     plt.title('Malware percentages')
    #     plt.axis('equal')
    #     plt.savefig('pie_chart.png')
    #     plt.show()
    #
    # pie_chart()
